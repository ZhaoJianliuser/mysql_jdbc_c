#ifndef AGENTCONNECTION_H_
#define AGENTCONNECTION_H_

#include "mysql/jdbc.h"

class MysqlConnectionPool;

class AgentConnection {
public:
        AgentConnection(sql::Connection* const conn, MysqlConnectionPool* const connection_pool) :
                conn_(conn),
                connection_pool_(connection_pool) {

        }

        void clearWarnings();

        sql::Statement* createStatement();

        void close();

        void commit();

        bool getAutoCommit();

        sql::SQLString getCatalog();

        sql::Driver* getDriver();

        sql::SQLString getSchema();

        sql::SQLString getClientInfo();

        void getClientOption(const sql::SQLString& optionName, void* optionValue);

        sql::SQLString getClientOption(const sql::SQLString& optionName);

        sql::DatabaseMetaData* getMetaData();

        sql::enum_transaction_isolation getTransactionIsolation();

        const sql::SQLWarning* getWarnings();

        bool isClosed();

        bool isReadOnly();

        bool isValid();

        bool reconnect();

        sql::SQLString nativeSQL(const sql::SQLString& sql);

        sql::PreparedStatement* prepareStatement(const sql::SQLString& sql);

        sql::PreparedStatement* prepareStatement(const sql::SQLString& sql, int autoGeneratedKeys);

        sql::PreparedStatement* prepareStatement(const sql::SQLString& sql, int* columnIndexes);

        sql::PreparedStatement* prepareStatement(const sql::SQLString& sql, int resultSetType, int resultSetConcurrency);

        sql::PreparedStatement* prepareStatement(const sql::SQLString& sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability);

        sql::PreparedStatement* prepareStatement(const sql::SQLString& sql, sql::SQLString columnNames[]);

        void releaseSavepoint(sql::Savepoint* savepoint);

        void rollback();

        void rollback(sql::Savepoint* savepoint);

        void setAutoCommit(bool autoCommit);

        void setCatalog(const sql::SQLString& catalog);

        void setSchema(const sql::SQLString& catalog);

        sql::Connection* setClientOption(const sql::SQLString& optionName, const void* optionValue);

        sql::Connection* setClientOption(const sql::SQLString& optionName, const sql::SQLString& optionValue);

        void setHoldability(int holdability);

        void setReadOnly(bool readOnly);

        sql::Savepoint* setSavepoint();

        sql::Savepoint* setSavepoint(const sql::SQLString& name);

        void setTransactionIsolation(sql::enum_transaction_isolation level);
private:
	// 连接实例
	sql::Connection* conn_;
	// 连接池实例
	MysqlConnectionPool* connection_pool_;
};

#endif // AGENTCONNECTION_H_
